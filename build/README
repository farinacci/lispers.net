
Building the lispers.net LISP Subsystem
---------------------------------------
    
This directory is used to build lispers.net images. The script:

    > python make-release.py <release-number>

builds a compressed tarball with obfuscated pyo files. The name of the
tarball file is lispers.net-x86-release-<release-number>.tgz. For a
description of the lispers.net code and release journey, refer to     
lispers.net/docs/release-history.pdf.

This script must be run in this build/ directory and depends on peer 
directories docs/ and lisp/. It also depends on a sub-directory called 
py-depend/.

When building a new release, make sure you edit the top of the file
build/release-notes.txt to include a brief description what you added or
fixed in the release. This file is displayed in the lispers.net landing page
when the "system status" button is clicked on.

The last built release directory will always have a symbolic-link called 
"latest" pointing to it. If you see a release number like "0.486" pointed
to by symlink "latest", it is a generally available release. If you see
"dashed releases" like "0.486-2" or "0.485-20" (a lot of tries), these are
interim releases which should not be used. They are built to verify bugfixes
for a specific use-case.

The symbolic-link called "stable" points to a release directory that has been
tested a lot and regarded as stable.    

The build machine that make-release.py runs on depends on the following tools
to be installed:

    pyflakes
    pyobfuscate

And to build lisp-xtr go binary in the lisp/ directory by doing a:

    > ./build-xtr

you need the go compiler:

    > go version
    go version go1.10.4 linux/amd64

and go libraries by doing:

    > go get github.com/google/gopacket
    > go get github.com/google/gopacket/afpacket
    > go get github.com/google/gopacket/layers
    > go get github.com/google/gopacket/pcap
    > go get golang.org/x/net/bpf

After building the lisp-xtr go binary, make-release.py picks it up from
lisp/ directory to include in the tarball file. Note the lisp-xtr go binary
is a faster LISP data-plane forwarding engine but less feature-rich than
the python data-plane forwarding engine. When it is enabled by uncommenting
the LISP_RUN_LISP_XTR environment variable in the lisp/RUN-LISP startup script.
When the go-based lisp-xtr runs the python data-plane does not.

-------------------------------------------------------------------------------

Building Docker Images
----------------------    

You can build docker images by using the dockerfile in build/Dockerfile. When
lispers.net is run in a docker container, all lispers.net dependencies are
installed and the LISP subsystem is brought up when container starts. It
will have an unconfigured system but the lisp-core process will run and the
web page is accessible. You can then attach to the container and configure
any LISP functionality you need.

In the build/ directory type:

    > docker build -t lispers.net/ubuntu .

If you want to build container images based on centos or debian, modify the
top of the build/Dockerfile. To start a docker container that runs the
lispers.net LISP subsystem, create aliases like:

alias drun-ubuntu 'docker run -p 8080 --privileged --name \!* -h \!* -v /:/hostOS -ti lispers.net/ubuntu'
alias drun-centos 'docker run -p 8080 --privileged --name \!* -h \!* -v /:/hostOS -ti lispers.net/centos'
alias drun-debian 'docker run -p 8080 --privileged --name \!* -h \!* -v /:/hostOS -ti lispers.net/debian'

and simply type:

    > drun-ubuntu <my-lisp-container-name>

Modify your -v parameters to your liking or leave it off all together.

For distribuing lispers.net docker images do:

    > docker save -o lispers-net-<release>-ubuntu-docker-image lispers.net/ubuntu

And for loading a docker image built using "docker save" do:

    > sudo docker load -i lispers-net-<release>-ubuntu-docker-image

-------------------------------------------------------------------------------

Building LISP Application Releases
----------------------------------    
    
The script:

    > python make-apps-release.py

will build a compressed tarball image with all the apps in the apps/ directory.

-------------------------------------------------------------------------------
